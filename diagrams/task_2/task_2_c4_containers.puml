@startuml

title "С4 Контейнеры - Умный дом"

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

LAYOUT_TOP_DOWN()
LAYOUT_WITH_LEGEND()

' Определение пользователей
Person(user, "Пользователь", "Владелец умного дома")

' Определение границ системы
System_Boundary(smartHome, "Экосистема Умного Дома") {

' Frontend и API Gateway 
    Container(ui, "Веб-приложение", "JavaScript/HTML", "Позволяет пользователям управлять системой")
    Container(apiGateway, "API Gateway", "Spring Cloud Gateway", "Авторизация, кеширование, маршрутизация запросов")

' Определение микросервисов
    Container(managmentToolsService, "ManagmentToolsService", "Java", "Контроль и управление устройствами") #319439
    ContainerDb(managmentDb, "Managment DB", "PostgreSQL", "Хранение информации об устройствах")
    
    Container(telemetryAggregationService, "TelemetryAggregationService", "Java", "Сбор, обработка и анализ данных с устройств")  #319439
    ContainerDb(telemetryDb, "Telemetry DB", "PostgreSQL", "Хранение телеметрических данных")
    
    Container(notificationService, "NotificationService", "Java", "Отправка уведомлений пользователям и техподдержке") #319439
    ContainerDb(notificationDb, "Notification DB", "PostgreSQL", "Хранение истории уведомлений")
    
    Container(identityService, "IdentityService", "Java", "Аутентификация и управление пользователями") #319439
    ContainerDb(identityDb, "Identity DB", "PostgreSQL", "Хранение данных пользователей и ролей")
    
    Container(integrationService, "IntegrationService", "Java", "Интеграция со сторонними системами и протоколами")  #319439
    ContainerDb(integrationDb, "Integration DB", "PostgreSQL", "Хранение настроек интеграций")
    
    Container(supportService, "SupportService", "Java", "Обработка запросов в техподдержку")  #319439
    ContainerDb(supportDb, "Support DB", "PostgreSQL", "Хранение тикетов поддержки")
    
    Container(analyticsService, "AnalyticsService", "Python", "Анализ данных и генерация отчетов")  #319439
    ContainerDb(analyticsDb, "Analytics DB", "ClickHouse", "Хранение аналитических данных")
    
' Брокер сообщений
    SystemQueue(kafka, "Kafka", "Брокер сообщений для асинхронного взаимодействия сервисов") #232227
    
'Кэш
    Container(redis, "Redis", "In-Memory Cache", "Кеширование данных и ускорение запросов") #DC382D
}

System_Ext(sensors, "Датчики и реле", "Температурные датчики, умные розетки, камеры наблюдения")

' Взаимодействие между контейнерами
Rel(user, ui, "Взаимодействие через браузер (HTTPS)")
Rel(ui, apiGateway, "Запросы к API (REST over HTTPS)")

Rel(apiGateway, managmentToolsService, "Маршрутизация команд управления устройствами")
Rel(apiGateway, telemetryAggregationService, "Запрос телеметрических данных")
Rel(apiGateway, identityService, "Аутентификация и авторизация пользователей")
Rel(apiGateway, integrationService, "Интеграция с внешними сервисами")
Rel(apiGateway, supportService, "Создание и обработка тикетов поддержки")
Rel(apiGateway, notificationService, "Отправка уведомлений пользователям")
Rel(apiGateway, analyticsService, "Запрос аналитики и отчетов")

' Взаимодействие с датчиками
Rel(managmentToolsService, sensors, "Передача команд через MQTT/WebSockets")
Rel(telemetryAggregationService, sensors, "Сбор данных через MQTT/WebSockets")

' Взаимодействие с брокером сообщений
Rel(notificationService, kafka, "Отправка событий уведомлений (Async API)")
Rel(managmentToolsService, kafka, "Передача команд управления (Async API)")
Rel(integrationService, kafka, "Обмен данными с внешними системами (Async API)")
Rel(telemetryAggregationService, kafka, "Передача телеметрических данных (Async API)")
Rel(analyticsService, kafka, "Получение событий и данных для анализа (Async API)")

' Взаимодействие с базами данных
Rel(managmentToolsService, managmentDb, "Запросы к базе данных (SQL Queries)")
Rel(telemetryAggregationService, telemetryDb, "Сохранение и анализ телеметрии (SQL Queries)")
Rel(identityService, identityDb, "Управление пользователями (SQL Queries)")
Rel(integrationService, integrationDb, "Хранение параметров интеграций (SQL Queries)")
Rel(supportService, supportDb, "Хранение и обработка тикетов (SQL Queries)")
Rel(notificationService, notificationDb, "Сохранение истории уведомлений (SQL Queries)")
Rel(analyticsService, analyticsDb, "Сохранение и обработка аналитических данных (SQL Queries)")

' Взаимодействие с кешем
Rel(apiGateway, redis, "Кеширование данных для уменьшения нагрузки")
Rel(notificationService, redis, "Хранение временных данных для уведомлений")
Rel_D(analyticsService, redis, "Кеширование результатов аналитики")

@enduml