@startuml

title "С4 Компоненты - Умный дом"

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_TOP_DOWN()
LAYOUT_WITH_LEGEND()

' Определение пользователей
Person(user, "Пользователь", "Владелец умного дома")

' Определение границ системы
System_Boundary(smartHome, "Экосистема Умного Дома") {

' Frontend и API Gateway 
    Container(ui, "Веб-приложение", "JavaScript/HTML", "Позволяет пользователям управлять системой")
    Container(apiGateway, "API Gateway", "Spring Cloud Gateway", "Авторизация, кеширование, маршрутизация запросов")

' Микросервисы

    Container_Boundary(managmentToolsContainer, "Контроль и управление устройствами") {
        Component(deviceRegistrationComponent, "DeviceRegistrationController", "Java", "Регистрация и верификация устройств")
        Component(deviceControlComponent, "DeviceControlController", "Java", "Управление командами для устройств")
        Component(deviceStatusComponent, "DeviceStatus", "Java", "Мониторинг состояния устройств")
        Component(lightingControlComponent, "LightingControlComponent", "Java", "Управление светом")
        Component(gateControlComponent, "GateControlComponent", "Java", "Управление воротами")
        Component(videoObservationControlComponent, "VideoObservationControlComponent", "Java", "Управление видеонаблюдением")

        ContainerDb(managmentToolsDb, "Managment DB", "PostgreSQL", "Хранение информации об устройствах")
    }

    Container_Boundary(telemetryAggregationContainer, "Сбор, обработка и анализ данных с устройств") {
        Component(telemetryProcessorComponent, "TelemetryProcessorController", "Java", "Обработка и фильтрация телеметрических данных")
        ContainerDb(telemetryDb, "Telemetry DB", "PostgreSQL", "Хранение телеметрических данных")
    }

    Container_Boundary(notificationContainer, "Отправка уведомлений пользователям и техподдержке") {
        Component(notificationSenderComponent, "NotificationSenderController", "Java", "Отправка уведомлений пользователю")
        ContainerDb(notificationDb, "Notification DB", "PostgreSQL", "Хранение истории уведомлений")
    }

    Container_Boundary(identityContainer, "Аутентификация и управление пользователями") {
        Component(userManagementComponent, "UserManagementController", "Java", "Управление ролями и правами доступа пользователей")
        ContainerDb(identityDb, "Identity DB", "PostgreSQL", "Хранение данных пользователей и ролей")
    }

    Container_Boundary(integrationContainer, "Интеграция со сторонними системами и протоколами") {
        Component(externalDeviceIntegrationComponent, "ExternalDeviceIntegrationController", "Java", "Интеграция с устройствами партнеров")
        ContainerDb(integrationDb, "Integration DB", "PostgreSQL", "Хранение настроек интеграций")
    }

    Container_Boundary(supportContainer, "Обработка запросов в техподдержку") {
        Component(ticketManagementComponent, "TicketManagementController", "Java", "Обработка тикетов и запросов пользователей")
        Component(userSupportComponent, "UserSupportController", "Java", "Управление пользователями, связанные с тикетами поддержки")
        Component(ticketAssignmentComponent, "TicketAssignmentController", "Java", "Назначение тикетов на техподдержку и команды")
        Component(ticketHistoryComponent, "TicketHistoryController", "Java", "Просмотр истории изменений и статусов тикетов")
    
        ContainerDb(supportDb, "Support DB", "PostgreSQL", "Хранение тикетов поддержки")
    }

    Container_Boundary(analyticsContainer, "Анализ данных и генерация отчетов") {
        Component(dataAnalyzerComponent, "DataAnalyzer", "Java", "Анализ данных с использованием ML и алгоритмов")
        ContainerDb(analyticsDb, "Analytics DB", "ClickHouse", "Хранение аналитических данных")
    }

      Container_Boundary(kafkaContainer,"Брокер сообщений")   {
       SystemQueue(kafkaComponent, "Kafka", "Брокер сообщений для взаимодействия между сервисами") #232227
    }

    Container_Boundary(redisContainer,"In-Memory Cache")  {
       Container(redisComponent, "Redis", "Кеширование данных и ускорение запросов") #DC382D
    }

    System_Ext(sensorComponent, "Датчики и реле", "Температурные датчики, умные розетки, камеры наблюдения")
}

'-----------------------------------------------------------------------------------------------------------------------

' Взаимодействие между контейнерами
Rel(user, ui, "Взаимодействие через браузер (HTTPS)")
Rel(ui, apiGateway, "REST API запросы")
Rel(apiGateway, managmentToolsContainer, "Управление устройствами (REST API)")
Rel(apiGateway, telemetryAggregationContainer, "Получение данных телеметрии (REST API)")
Rel(apiGateway, notificationContainer, "Отправка уведомлений (REST API)")
Rel(apiGateway, identityContainer, "Аутентификация и авторизация (REST API)")
Rel(apiGateway, integrationContainer, "Настройка интеграций (REST API)")
Rel(apiGateway, supportContainer, "Создание и обработка тикетов (REST API)")
Rel(apiGateway, analyticsContainer, "Запрос аналитики (REST API)")

' Взаимодействие между компонентами микросервисов
Rel(deviceRegistrationComponent, managmentToolsDb, "Регистрация устройств (REST API)")
Rel(deviceControlComponent, managmentToolsDb, "Отправка команд устройствам (REST API)")
Rel(deviceStatusComponent, managmentToolsDb, "Получение состояния устройств (REST API)")
Rel(lightingControlComponent, managmentToolsDb, "Управление светом (REST API)")
Rel(gateControlComponent, managmentToolsDb, "Управление воротами (REST API)")
Rel(videoObservationControlComponent, managmentToolsDb, "Упарвление видеонаблюдением (REST API)")

Rel(telemetryProcessorComponent, telemetryDb, "Чтение и запись данных телеметрии")

Rel(notificationSenderComponent, notificationDb, "Запись уведомлений")

Rel(userManagementComponent, identityDb, "Чтение и запись данных пользователей")

Rel(externalDeviceIntegrationComponent, integrationDb, "Чтение и запись настроек интеграции")

Rel(ticketManagementComponent, supportDb, "Запись тикетов в базу данных")
Rel(userSupportComponent, supportDb, "Запись тикетов в базу данных")
Rel(ticketAssignmentComponent, supportDb, "Запись тикетов в базу данных")
Rel(ticketHistoryComponent, supportDb, "Запись тикетов в базу данных")

Rel(dataAnalyzerComponent, analyticsDb, "Запись данных аналитики")

' Взаимодействие между микросервисами через брокер сообщений
Rel(managmentToolsContainer, kafkaComponent, "Отправка событий управления устройствами (Async API)")
Rel(notificationContainer, kafkaComponent, "Передача команд на отправку уведомлений (Async API)")
Rel(integrationContainer, kafkaComponent, "Обмен данными с внешними системами (Async API)")
Rel(telemetryAggregationContainer, kafkaComponent, "Передача телеметрических данных (Async API)")
Rel(analyticsContainer, kafkaComponent, "Получение событий для анализа (Async API)")

' Взаимодействие с кешем
Rel(apiGateway, redisComponent, "Кеширование данных для быстрого доступа")
Rel(telemetryAggregationContainer, redisComponent, "Кеширование свежих данных телеметрии")
Rel(notificationContainer, redisComponent, "Кеширование статусов уведомлений")

' Взаимодействие с Датчиками
Rel(managmentToolsContainer,sensorComponent, "Получение данных с устройств" )
@enduml
